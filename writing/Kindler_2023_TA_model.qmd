---
title: "Analysis for Threatened Australians model paper"
format: html
toc: true
bibliography: ../lenovo_pop_os_my_library_spec.bib
link-citations: true
execute:
  echo: false
  warning: false
---

I originally started writing this article completely in Quarto. Having to interface with Word users killed this ambition. And also writing out the results in a way that used in-line code meant that I couldn't see the results until it was rendered which is fine but not ideal for the full writing of a research article. I replaced these ambitions with that I would carry out the analysis in a (this) Quarto doc and render it to html/pdf for transplanting across to the main word article for writing.

```{r libraries, include=FALSE}
prepare_workspace <- function() {
  pacman::p_load(tidyverse, sf, magrittr, jsonlite, units, readxl, stringr, plotly, forcats, reactable, readODS, naniar, viridis, ggridges, networkD3, httpgd, lubridate, oz, ozmaps, mapdata, maps, tmap, rmapshaper, here, png, tmap, leaflet, grid, cartogram, rmapshaper, tmaptools, magrittr)

  here::here()
  here::i_am("writing/Kindler_2023_TA_model.qmd")

  # hgd()
}

prepare_workspace()

source(here("R/load_data.R"))
source(here("R/analysis.R"))
```

```{r import, include=FALSE}
data_nonspatial <- load_json_data()

data_spatial <- load_spatial_data()
```

# Impact and actions

## Actions taken

### Email your MP (analytics)

* What was the conversion rate of user to email MP link clicks?

```{r}
data_nonspatial$links_email_clean <- data_nonspatial$links_email_clean |>
  arrange(desc(event_count))

knitr::kable(head(data_nonspatial$links_email_clean, 10))
```

```{r}
data_nonspatial$acquis_time_sum <- make_acquis_time_sum(data_nonspatial$acquis_time_clean)
```

The total number of email MP link clicks was `r data_nonspatial$links_email_clean %>% summarise(sum = sum(event_count))`. If we assume that users only clicked the email MP link once, then the conversion rate of users to email MP link clicks was `r data_nonspatial$links_email_clean %>% summarise(sum = sum(event_count))` / `r data_nonspatial$acquis_time_sum %>% filter(between(date, as.Date("2022-05-02"), as.Date("2022-05-21"))) %>% summarise(sum = sum(sum))`. The median number of email MP link clicks per electoral district was `r data_nonspatial$links_email_clean %>% summarise(median = median(event_count))`. The top four electoral districts which received the most "Email your MP" link clicks were Berowra (NSW), Ryan (QLD), Grayndler (NSW), and Eden-Monaro (NSW).

### Learning about current rep voting record (analytics)

Communicating with an elected representative requires having an understanding of how they represent their constituents. The web app displayed They Vote For You's conclusion on how that representative had "voted on federal government action on animal & plant extinctions". We found there were `r data_nonspatial$links_domain_clean |> filter(str_detect(link_domain, "theyvoteforyou")) |> select(event_count)` clicks on links to They Vote For You that allowed the user to explore more about representative voting behaviour.

## Survey responses (survey)

```{r}
data_nonspatial$feedback_clean <- transform_feedback(data_nonspatial$feedback_clean)

data_nonspatial$feedback_actions_result <- make_feedback_actions_result(data_nonspatial$feedback_clean['actions_result'])

data_nonspatial$feedback_easy_to_understand <- make_feedback_easy_to_understand(data_nonspatial$feedback_clean['easy_to_understand'])
```

```{r}
data_nonspatial$feedback_actions_result |>
  mutate(
    users_n_percent = paste0(n , " (" , percent, ")")
  ) |>
  select(actions_result, users_n_percent) |>
  knitr::kable()
```

```{r}
data_nonspatial$feedback_easy_to_understand |>
  mutate(
    users_n_percent = paste0(n , " (" , percent, ")")
  ) |>
  select(easy_to_understand, users_n_percent) |>
  knitr::kable()

```

There were 35 genuine responses out of 57 on the survey found at the feedback link on the header of the app. 40% of users who answered the form said they were going to take actions as a result of using the app. 43% said they were either probably, that they would not or were unsure of whether they would. 60% of survey form answers either agreed or strongly agreed that the information found on the app was easy to understand.

## User testimonials (survey)

```{r}
# view(data_nonspatial$feedback_clean)
```

At least three users expressed desire for a list of all threatened species in each electoral division that would allow them to search or quickly scan as opposed to click to cycle through species one at a time. For example, "It would be good to have a list of the animals/plants first with links rather than have to click through".

A few users expressed confusion or dislike by finding offshore islands being part of their electoral division despite this being the case in reality, "by going by my electorate you have included Norfolk Island (which has been lumped into Bean) threatened species which have no relevance to me in Canberra 2607".

Multiple users expressed a discrepancy between their knowledge of which threatened species are local to them and what was presented to them. This observation from users highlights the obsolescence of the EPBC Act data as seen in the user response "it included many species that disappeared from the area long ago."

When users were asked if they have any suggestions for ways that we might improve the project, a user suggested "I think it would be extremely useful to add actions for kids to take in the "what you can do" part".

* "I was really illuminated by this web app - had no idea there were so many vulnerable species around me. You often think of endangered species as being out in the bush - I''m urban and this was surprising to me."
* "Brilliant electorate based platform to connect people to biodiversity in their area, and more activate them into electorate level mobilisations"
* "Keeping an eye out for the species, and possibly contacting my MP" and "Inform our community group, write to the federal, state and local members"

# User activity

## General user activity and sources (analytics)

* What is the total number of users the app received?

```{r}
data_nonspatial$acquis_time_source <- make_acquis_time_source(data_nonspatial$acquis_time_clean)

data_nonspatial$acquis_time_source |>
  summarise(sum = sum(total))
```

The TA web application was launched on the May 3, 2022 ahead of the Australian federal election held on the May 21, 2022. Prior to election day, `r data_nonspatial$acquis_time_sum %>% filter(between(date, as.Date("2022-05-02"), as.Date("2022-05-21"))) %>% summarise(sum = sum(sum))` (`r data_nonspatial$acquis_time_sum %>% filter(between(date, as.Date("2022-05-02"), as.Date("2022-05-21"))) %>% summarise((sum = sum(sum))/(data_nonspatial$acquis_time_sum %>% summarise(sum = sum(sum)))*100) %>% round()`%) users visited the web app (Figure X). During the six week period from May 3, 2022 to June 14, 2022, the TA web app received a total of `r data_nonspatial$acquis_time_sum %>% summarise(sum = sum(sum))` users. The largest acquisition source of users were from `r data_nonspatial$acquis_time_source %>% select(source) %>% slice(1)` input of the TA URL into a web browser application (`r data_nonspatial$acquis_time_source %>% select(total) %>% slice(1)`, `r data_nonspatial$acquis_time_source %>% select(total_percent) %>% slice(1)`%). The Australian Broadcasting Corporation accounted for `r data_nonspatial$acquis_time_source %>% select(total) %>% slice(2)` (`r data_nonspatial$acquis_time_source %>% select(total_percent) %>% slice(2)`%) users, followed by The Conversation with `r data_nonspatial$acquis_time_source %>% select(total) %>% slice(3)` (`r data_nonspatial$acquis_time_source %>% select(total_percent) %>% slice(3)`%), Google with `r data_nonspatial$acquis_time_source %>% select(total) %>% slice(4)` (`r data_nonspatial$acquis_time_source %>% select(total_percent) %>% slice(4)`%), and Facebook `r data_nonspatial$acquis_time_source %>% select(total) %>% slice(5)` (`r data_nonspatial$acquis_time_source %>% select(total_percent) %>% slice(5)`%).

```{r}
#| label: fig-engag-usage-time
#| fig-cap: Time series of Threatened Australians web app usage including key events. Acquisition of users from the corresponding websites (colour) and proportion in relation to total number of users (shaded area).

# TODO: add in key media events, maybe by joining the two datasets, or manual add-in as per Chang 2018

plot_engage_usage_time(data_nonspatial$acquis_time_clean)
```


# Content engagement

## Most-clicked links (analytics)

* What were the most clicked links?

```{r}
data_nonspatial$links_domain_clean <- data_nonspatial$links_domain_clean |>
  arrange(desc(event_count))

knitr::kable(head(data_nonspatial$links_domain_clean, 10))
```

The most clicked domain link was to "environment.gov.au". The web app linked to this domain across multiple pages such as under the About me section and the scientific names of each plant species on the electoral district page. The second most clicked link was a hyperlink primarily found as a hyperlink in the Plants section of the Electoral district page under the text "Berowra has or used to have 40 threatened plants found within its boundaries. Some of these might not be as photogenic as the Large-eared Pied Bat but they're just as important.". The link provided more information on why plants are important through Australia's SoE report.

## Species engagement (analytics)


* Which species received the most engagement/events?

There were 361 threatened animals and 1356 threatened plants across 151 electoral divisions.

NB: I answered these questions by going back to the TA_db and running the following. Except there had been the data update so that doesn't work. Therefore I went off data_nonspatial$species_title_av_time_clean no. of rows for animals. But I couldn't do the same for plants. This is an open question. 1356 is correct for the latest data update but not the data that was in the db during our study period. It wouldn't be off by much, I'd say absolute max 100. What is the impact of this on our study outcomes/analysis? I would say almost nothing. For now I'm going to go with the approximation.

```{r}
#| eval: true

# pacman::p_load(tidyverse, jsonlite, sf)

# plants_elects_tbl <- fromJSON("/Users/garethkindler/science/projects/electoral/threatened_australians_db/output/analysed_data/final/imports/plants_elects_tbl.json")

# plants_elects_tbl |>
#   group_by(taxon_ID) |>
#   summarise()


# # read geojson using st_read

# animals_tbl <- st_read("/Users/garethkindler/science/projects/electoral/threatened_australians_db/output/analysed_data/final/imports/animals_tbl.geojson") |>
#   st_set_geometry(NULL)

# animals_tbl |>
#   group_by(taxon_ID) |>
#   summarise()
```

The median average engagement time across threatened animals was `r data_nonspatial$species_title_av_time_clean |> summarise(median = median(average_engagement_time))`.

```{r}
# data_nonspatial$species_title_clean |>
#   group_by(electorate) |>
#   # sumamrise the to the minimum value of column event_count
#   summarise(min_val = min(event_count)) |>
#   summary()


# data_spatial$species_clean |>
#   st_set_geometry(NULL) |>
#   filter(taxon_kingdom == "Plantae") |>
#   group_by(taxon_ID) |>
#   summarise()

# table(data_spatial$species_clean$taxon_kingdom)
```

The most engaged threatened species were the Helmeted Honeyeater (Lichenostomus melanops cassidix), White-throated Grasswren (Amytornis woodwardi), and a short-tongued bee (Leioproctus douglasiellus) (Figure X).

```{r}
data_nonspatial$species_nonspatial_clean <- data_spatial$species_clean |>
  st_set_geometry(NULL) |>
  as_tibble() |>
  mutate_all(str_trim)

data_nonspatial$species_title_av_time_clean |>
  head(10) |>
  left_join(data_nonspatial$species_nonspatial_clean, join_by(vernacular_name == vernacular_name_first_clean)) |>
  select(vernacular_name, scientific_name = scientific_name_clean, average_engagement_time) |>
  mutate(vernacular_name = str_to_title(vernacular_name)) |>
  mutate(scientific_name = str_to_sentence(scientific_name)) |>
  mutate(
    vernacular_name = str_replace(
      vernacular_name, "A Native Bee", "A native bee"
      ),
    vernacular_name = str_replace(
      vernacular_name, "A Short-Tongued Bee", "A short-tongued bee"
      ),
    scientific_name = if_else(
      is.na(scientific_name), "Neopasiphae simplicior", scientific_name
      ),
    vernacular_name = str_replace(
      vernacular_name, "White-Throated Grasswren", "White-throated Grasswren"
      ),
    vernacular_name = str_replace(
      vernacular_name, "Yellow-Snouted Gecko", "Yellow-snouted Gecko"
      ),
    vernacular_name = str_replace(
      vernacular_name, "Broad-Toothed Rat", "Broad-toothed Rat"
      )
    ) |>
    # merge vernacular_name and scientific_name into the same column, putting scientific_name into brackets
  mutate(vernacular_scientific_name = if_else(is.na(scientific_name), vernacular_name, paste0(vernacular_name, " (", scientific_name, ")"))) |>
  select(vernacular_scientific_name, average_engagement_time) |>
  knitr::kable()
```


## User interaction with pages (analytics)

* How many events occurred across all pages?
* How many events occurred on the How-to-help page?
* How many events occurred on the district page?
* Which districts experienced the highest number of events?

```{r include=FALSE}
data_spatial[['species_title_spatial']] <- mk_species_title_spatial(data_spatial$elect_clean, data_nonspatial$species_title_clean)

data_nonspatial[['species_title']] <- data_spatial$species_title_spatial %>%
  st_set_geometry(NULL)
```

```{r}
data_rando_vars <- list()

data_rando_vars$sum_total_class_species <- data_nonspatial$species_title |> count(demographic_class) |> summarise(sum = sum(n))
data_rando_vars$sum_total_event_count_species <- sum(data_nonspatial$species_title$event_count)
data_rando_vars$sum_total_class_help <- data_nonspatial$help_title_clean |> count(demographic_class) |> summarise(sum = sum(n))
data_rando_vars$sum_total_event_count_help <- sum(data_nonspatial$help_title_clean$event_count)

data_nonspatial$species_title %>%
  group_by(state_territory_abbrev, demographic_class) %>%
  summarise(
    class_n = n(),
    class_n_percent = n()/data_rando_vars$sum_total_class_species * 100,
    total_event_count = sum(event_count),
    total_event_count_percent = total_event_count/data_rando_vars$sum_total_event_count_species * 100
  ) %>%
  arrange(desc(total_event_count)) |>
  knitr::kable()
```

An event is defined as a distinct user interaction with the TA web app such as viewing a page, scrolling, and clicking. The majority of events occurred across all the Species pages `r data_rando_vars$sum_total_event_count_species` (`r round(data_rando_vars$sum_total_event_count_species / (data_rando_vars$sum_total_event_count_species + data_rando_vars$sum_total_event_count_help) * 100)`%) compared to `r data_rando_vars$sum_total_event_count_help` (`r round(data_rando_vars$sum_total_event_count_help / (data_rando_vars$sum_total_event_count_help + data_rando_vars$sum_total_event_count_help) * 100)`) events on the How to Help pages.

The Species pages with the most events aggregated by electoral district was `r data_nonspatial$species_title %>% arrange(desc(event_count)) %>% select(electorate) %>% slice(1)` (`r data_nonspatial$species_title %>% arrange(desc(event_count)) %>% select(state_territory_abbrev) %>% slice(1)`, n = `r data_nonspatial$species_title %>% arrange(desc(event_count)) %>% select(event_count) %>% slice(1)`), followed by `r data_nonspatial$species_title %>% arrange(desc(event_count)) %>% select(electorate) %>% slice(2)` (`r data_nonspatial$species_title %>% arrange(desc(event_count)) %>% select(state_territory_abbrev) %>% slice(2)`, n = `r data_nonspatial$species_title %>% arrange(desc(event_count)) %>% select(event_count) %>% slice(2)`), and `r data_nonspatial$species_title %>% arrange(desc(event_count)) %>% select(electorate) %>% slice(3)` (`r data_nonspatial$species_title %>% arrange(desc(event_count)) %>% select(state_territory_abbrev) %>% slice(3)`, n = `r data_nonspatial$species_title %>% arrange(desc(event_count)) %>% select(event_count) %>% slice(3)`).

In comparison, the least number of Species events was from the district of `r data_nonspatial$species_title %>% arrange(event_count) %>% select(electorate) %>% slice(1)` (`r data_nonspatial$species_title %>% arrange(event_count) %>% select(state_territory_abbrev) %>% slice(1)`) with `r data_nonspatial$species_title %>% arrange(event_count) %>% select(event_count) %>% slice(1)` (Figure X).


```{r}
data_nonspatial$help_title_clean %>%
  group_by(state_territory_abbrev, demographic_class) %>%
  summarise(
    class_n = n(),
    class_n_percent = n()/data_rando_vars$sum_total_class_help * 100,
    total_event_count = sum(event_count),
    total_event_count_percent = total_event_count/data_rando_vars$sum_total_event_count_help * 100
  ) %>%
  arrange(desc(total_event_count)) |>
  knitr::kable()
```

The How to Help page with the most events was from the electoral district of `r data_nonspatial$help_title_clean %>% arrange(desc(event_count)) %>% select(electorate) %>% slice(1)` (`r data_nonspatial$help_title_clean %>% arrange(desc(event_count)) %>% select(state_territory_abbrev) %>% slice(1)`, n = `r data_nonspatial$help_title_clean %>% arrange(desc(event_count)) %>% select(event_count) %>% slice(1)`), followed by `r data_nonspatial$help_title_clean %>% arrange(desc(event_count)) %>% select(electorate) %>% slice(2)` (`r data_nonspatial$help_title_clean %>% arrange(desc(event_count)) %>% select(state_territory_abbrev) %>% slice(2)`, n = `r data_nonspatial$help_title_clean %>% arrange(desc(event_count)) %>% select(event_count) %>% slice(2)`), and `r data_nonspatial$help_title_clean %>% arrange(desc(event_count)) %>% select(electorate) %>% slice(3)` (`r data_nonspatial$help_title_clean %>% arrange(desc(event_count)) %>% select(state_territory_abbrev) %>% slice(3)`, n = `r data_nonspatial$help_title_clean %>% arrange(desc(event_count)) %>% select(event_count) %>% slice(3)`).

```{r}
data_nonspatial$species_help_title_clean <- data_nonspatial$help_title_clean |>
  select(electorate, state_territory, state_territory_abbrev, demographic_class, event_count) |>
  # now join this data with the other while merging into one the rows that match in electorate, state_territoyr, state_territory_abbrev, demographic_class while summing the event_count column
  left_join(data_nonspatial$species_title, by = c("electorate", "state_territory", "state_territory_abbrev", "demographic_class")) |>
  select(-c(active_users, engaged_sessions)) |>
  # mutate a new column which is the addition of event_count.x, event_count.y
  mutate(event_count = event_count.x + event_count.y) |>
  select(-c(event_count.x, event_count.y))
```

```{r}
mk_species_help_title_spatial <- function(data, data_join) {
  species_help_title_spatial <- data %>%
    full_join(., data_join) |>
    mutate(
      electorate_abbrev = abbreviate(
          electorate,
          minlength = 2L
      )
    ) |>
    relocate(electorate_abbrev, .after = electorate)

  return(species_help_title_spatial)
}

data_spatial$species_help_title_spatial <- mk_species_help_title_spatial(data_spatial$elect_clean, data_nonspatial$species_help_title_clean)

# print(object.size(data_spatial$species_help_title_spatial), units = "Kb")

# elect <- ms_simplify(
#   elect,
#   keep = 0.1,
#   keep_shape = TRUE
# ) %>%
#   st_make_valid()


data_spatial$species_help_title_spatial_dorl_weight <- data_spatial$species_help_title_spatial %>%
  st_transform(
    3112
  ) %>%
  cartogram_dorling(
    weight = "event_count",
    k = 0.18
    # m_weight = 1
  )

#### tmap ####

figures <- list()

figures$species_help_title_spatial_dorl <-
tm_shape(
  data_spatial$elect_clean,
  bbox = st_bbox(c(
    xmin = 112.929704,
    ymin = -43.627943,
    xmax = 155.629864,
    ymax = -9.115517
    )
  )
  ) +
  tm_borders(
    "white",
    lwd = 1
  ) +
  tm_fill(
    "#d8d8d8"
  ) +
  tm_shape(
    data_spatial$species_help_title_spatial_dorl_weight,
    bbox = st_bbox(c(
      xmin = 112.929704,
      ymin = -43.627943,
      xmax = 155.629864,
      ymax = -9.115517
    )
  )
  ) +
  tm_fill(
    "event_count",
    style = "jenks",
    # style = "cont",
    title = "Event count",
    palette = "-inferno"
  ) +
  tm_text(
    "electorate_abbrev",
    size = 0.45
  ) +
  tm_borders(
    alpha = 0.6
  ) +
  # tm_legend(
    # legend.position = c("left", "top")
    # title.position = c("left", "bottom")
  # ) +
  tm_compass(position = c("left", "bottom")) +
  tm_scale_bar(
    position = c("left", "bottom"),
    width = 0.2
  ) +
  tm_layout(
    frame = FALSE,
    # legend.width = 1,
    # legend.height = 0.8,
    # legend.title.size = 1.5
    # legend.outside = TRUE
  )

figures$species_help_title_spatial_dorl

tmap_save(figures$species_help_title_spatial_dorl,
  file = here("output/figures/ced_events_dorl.png"),
  height = 15, width = 15, units = "cm"
)
```